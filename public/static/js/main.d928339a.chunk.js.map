{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","components_LaunchItem","Component","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","classnames","text-sucess","client","ApolloClient","uri","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWA4BeA,MAvBf,SAAAC,GAEI,IAAAC,EAAAD,EAFkBE,OAClBC,EACAF,EADAE,cAAgBC,EAChBH,EADgBG,aAAeC,EAC/BJ,EAD+BI,kBAAmBC,EAClDL,EADkDK,eAEpD,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAW,CACtCC,eAAgBN,EAChBO,eAAgBP,KAEjBF,EAJW,KAAd,KAKAG,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,OAAO,oBAAqBV,KAEjDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAE,WAAAC,OAAaf,GAAiBO,UAAU,qBAAhD,sBClBG,SAASS,IACtB,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBADpB,cAGAH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBADpB,4OCFR,IAAMU,EAAiBC,IAAHC,KAoCLC,EAxBf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,OACI5B,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KACI7B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,aACAH,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAC4B,EAAA,MAAD,CAAOC,MAAOlB,GACb,SAAApB,GAA8B,IAA3BuC,EAA2BvC,EAA3BuC,QAASC,EAAkBxC,EAAlBwC,MAAOC,EAAWzC,EAAXyC,KACxB,OAAIF,EAAgBhC,EAAAC,EAAAC,cAAA,yBAChB+B,GAAOE,QAAQC,IAAIH,GAEnBjC,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KACGK,EAAKG,SAASC,IAAI,SAAA3C,GAAM,OACvBK,EAAAC,EAAAC,cAACqC,EAAD,CAAYZ,IAAKhC,EAAOC,cAAeD,OAAQA,eAbnEqB,EAAA,CAA8BwB,yXCZ9B,IAAMC,EAAe3B,IAAH4B,KA8EHC,mLA5DJ,IACC/C,EAAkBwB,KAAKwB,MAAMC,MAAMC,OAAnClD,cAGR,OAFEA,EAAgBmD,SAASnD,GAGzBI,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KACI7B,EAAAC,EAAAC,cAAC4B,EAAA,MAAD,CAAOC,MAAQU,EAAcO,UAAW,CAACpD,kBAEnC,SAAAH,GAA0B,IAAxBuC,EAAwBvC,EAAxBuC,QAAQC,EAAgBxC,EAAhBwC,MAAMC,EAAUzC,EAAVyC,KACZ,GAAGF,EAAS,OAAOhC,EAAAC,EAAAC,cAAA,yBAChB+B,GAAOE,QAAQC,IAAIH,GAFA,IAAAgB,EAKiCf,EAAKvC,OADpDE,EAJcoD,EAIdpD,aAAeD,EAJDqD,EAICrD,cAAesD,EAJhBD,EAIgBC,YAAanD,EAJ7BkD,EAI6BlD,eAJ7BoD,EAAAF,EAKlBG,OAASC,EALSF,EAKTE,UAAYC,EALHH,EAKGG,YAAaC,EALhBJ,EAKgBI,YACtC,OACAvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,YACCN,GAEHG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,kBACkBP,GAElBI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACgB+C,GAEhBlD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,kBAEEH,EAAAC,EAAAC,cAAA,QAAMsD,WAAYpD,IAAW,CAC3BqD,cAAe1D,EACfO,eAAgBP,KAEhBA,EAAiB,MAAQ,QAI/BC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,cAA4CkD,GAC5CrD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACcmD,GAEdtD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACcoD,IAGlBvD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMN,UAAU,oBAAoBO,GAAG,KAAvC,mBAlDD8B,aCdfkB,SAAS,IAAIC,IAAa,CAC9BC,IAAK,cAoBQC,mLAfX,OACA7D,EAAAC,EAAAC,cAAC4B,EAAA,eAAD,CAAgB4B,OAAQA,GACtB1D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,KACE9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEfH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlD,IACjChB,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,yBAAyBC,UAAWvB,cAT5CH,aCDE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d928339a.chunk.js","sourcesContent":["import React from 'react'\nimport Moment from 'react-moment'\nimport classNames from 'classnames'\nimport { Link } from \"react-router-dom\"\n\nfunction LaunchItem({ launch: {\n    flight_number , mission_name , launch_date_local, launch_success }}) \n    {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\"> \n        <div className=\"col-md-9\">\n            <h4> Mission: <span className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success\n            })}\n            >{ mission_name } </span> </h4>\n            <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n            <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default LaunchItem\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n        <p>\n            <span className=\"px-3 mr-2 bg-success\"/> = Success \n        </p>\n        <p>\n            <span className=\"px-3 mr-2 bg-danger\"/> = Fail \n        </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql `\n  query LaunchesQuery {\n      launches {\n        flight_number\n        mission_name\n        launch_date_local\n        launch_success\n      }\n  }\n`;\n\n\nexport class Launches extends Component {\n    render(){\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\"> Launches</h1>\n                <MissionKey />\n                <Query query={LAUNCHES_QUERY}>\n                {({ loading, error, data }) => {\n            if (loading) return <h4>Loading...</h4>;\n            if (error) console.log(error);\n            return (\n                <Fragment>\n                  {data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                  ))}\n                </Fragment>\n            )\n                       }}\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches","import React, { Component , Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\n\nconst LAUNCH_QUERY = gql`\nquery LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nclass Launch extends Component {\n  render() {\n      let { flight_number } = this.props.match.params;\n      flight_number = parseInt(flight_number);\n\n    return (\n      <Fragment>\n          <Query query ={LAUNCH_QUERY} variables={{flight_number}}>\n            {\n                ({loading,error,data}) => {\n                    if(loading) return <h4>Loading....</h4>\n                    if(error) console.log(error)\n                    \n                    const { mission_name , flight_number, launch_year, launch_success, \n                        rocket: {rocket_id , rocket_name, rocket_type }} = data.launch \n                    return( \n                    <div>\n                        <h1 className=\"display-4 my-3\"> \n                        <span className=\"text-dark\">Mission:</span>\n                        {mission_name}\n                        </h1>\n                      <h4 className=\"mb-3\">Launch Details</h4>\n                      <ul className=\"list-group\">\n                        <li className=\"list-group-item\">\n                          Flight Number: {flight_number}\n                        </li>\n                        <li className=\"list-group-item\">\n                          Launch Year: {launch_year}\n                        </li>\n                        <li className=\"list-group-item\">\n                          Launch Success:\n                          <span classnames={classNames({\n                            'text-sucess': launch_success,\n                            'text-danger': !launch_success \n                          })}>\n                           {launch_success ? \"Yes\" : \"No\"}\n                          </span>\n                        </li>\n                      </ul>\n                      <h4 className=\"my-3\">Rocket Details</h4>\n                      <ul className=\"list-group\">\n                          <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                          <li className=\"list-group-item\">\n                          Rocket Name: {rocket_name}\n                          </li>\n                          <li className=\"list-group-item\">\n                          Rocket Type: {rocket_type}\n                          </li>\n                      </ul>\n                      <hr/>\n                      <Link className=\"btn btn-secondary\" to=\"/\">Back</Link>\n                    </div>\n                    )\n                }\n            }\n          </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch;","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo'\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\nimport './App.css';\n\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n        {/* <img src={logo} alt=\"spacex\" style={{ width: 300, display: 'block', margin: 'auto'}}></img> */}\n        <h1>SpaceX</h1>\n        <Route exact path=\"/\" component={Launches}/>\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}